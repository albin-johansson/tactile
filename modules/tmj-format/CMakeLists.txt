project(tactile-tmj-format CXX)

set(TACTILE_TMJ_FORMAT_DIR "${TACTILE_ROOT_DIR}/modules/tmj-format")

file(GLOB_RECURSE TACTILE_TMJ_FORMAT_SOURCE_FILES
     CONFIGURE_DEPENDS
     "${TACTILE_TMJ_FORMAT_DIR}/inc/**/*.hpp"
     "${TACTILE_TMJ_FORMAT_DIR}/src/**/*.cpp"
     )

add_library(${TACTILE_TMJ_FORMAT_TARGET} SHARED ${TACTILE_TMJ_FORMAT_SOURCE_FILES})
add_library(tactile::tiled-json-format ALIAS ${TACTILE_TMJ_FORMAT_TARGET})

tactile_prepare_target(${TACTILE_TMJ_FORMAT_TARGET})

target_compile_definitions(${TACTILE_TMJ_FORMAT_TARGET}
                           PRIVATE
                           TACTILE_BUILDING_TMJ_PLUGIN
                           )

target_include_directories(${TACTILE_TMJ_FORMAT_TARGET} PUBLIC "${TACTILE_TMJ_FORMAT_DIR}/inc")

target_link_libraries(${TACTILE_TMJ_FORMAT_TARGET}
                      PUBLIC
                      tactile::foundation
                      nlohmann_json::nlohmann_json
                      )

install(TARGETS ${TACTILE_TMJ_FORMAT_TARGET} DESTINATION "${TACTILE_BUILD_DIR}/plugins/formats")

if (TACTILE_BUILD_TESTS MATCHES ON)
  set(TACTILE_TMJ_FORMAT_TEST_TARGET tactile-tmj-format-test)

  file(GLOB_RECURSE TACTILE_TMJ_FORMAT_TEST_FILES
       CONFIGURE_DEPENDS
       "${TACTILE_TMJ_FORMAT_DIR}/test/*.hpp"
       "${TACTILE_TMJ_FORMAT_DIR}/test/*.cpp"
       "${TACTILE_TMJ_FORMAT_DIR}/test/**/*.hpp"
       "${TACTILE_TMJ_FORMAT_DIR}/test/**/*.cpp"
       )

  add_executable(${TACTILE_TMJ_FORMAT_TEST_TARGET} ${TACTILE_TMJ_FORMAT_TEST_FILES})

  tactile_prepare_target(${TACTILE_TMJ_FORMAT_TEST_TARGET})

  target_link_libraries(${TACTILE_TMJ_FORMAT_TEST_TARGET}
                        PRIVATE
                        tactile::tiled-json-format
                        GTest::gtest
                        )

  if (WIN32)
    add_custom_command(TARGET ${TACTILE_TMJ_FORMAT_TEST_TARGET} POST_BUILD
                       COMMAND ${CMAKE_COMMAND} -E copy $<TARGET_RUNTIME_DLLS:${TACTILE_TMJ_FORMAT_TEST_TARGET}> $<TARGET_FILE_DIR:${TACTILE_TMJ_FORMAT_TEST_TARGET}>
                       COMMAND_EXPAND_LISTS
                       )
  endif ()
endif ()